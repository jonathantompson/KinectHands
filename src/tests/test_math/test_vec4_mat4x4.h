//
//  test_vec2_mat2x2.h
//
//  Created by Jonathan Tompson on 4/26/12.
//

#include "tests/test_unit/test_unit.h"
#include "math/math_types.h"
#include "math/math_base.h"

namespace tests {

  using math::Vec4;
  using math::Mat4x4;

  TEST(Vec4_Mat4x4, SimpleManipulation) {
    // Some practice variables
    Vec4<double> V_1(5.376671395461000e-001, 1.833885014595087e+000, 
      -2.258846861003648e+000, 8.621733203681206e-001);
    Vec4<double> V_2(3.187652398589808e-001, -1.307688296305273e+000, 
      -4.335920223056836e-001, 3.426244665386499e-001);
    Mat4x4<double> M_1(3.578396939725761e+000, 7.254042249461056e-001, 
      -1.241443482163119e-001, 6.714971336080805e-001, 2.769437029884877e+000, 
      -6.305487318965619e-002, 1.489697607785465e+000, -1.207486922685038e+000,
      -1.349886940156521e+000, 7.147429038260958e-001, 1.409034489800479e+000, 
      7.172386513288385e-001, 3.034923466331855e+000, -2.049660582997746e-001, 
      1.417192413429614e+000, 1.630235289164729e+000);
    Mat4x4<double> M_2(4.888937703117894e-001, 2.938714670966581e-001, 
      -1.068870458168032e+000, 3.251905394561979e-001, 1.034693009917860e+000, 
     -7.872828037586376e-001, -8.094986944248755e-001, -7.549283191697034e-001,
      7.268851333832379e-001, 8.883956317576418e-001, -2.944284161994896e+000, 
      1.370298540095228e+000, -3.034409247860159e-001, -1.147070106969151e+000, 
      1.438380292815098e+000, -1.711516418853698e+000);

    double M_2_DET = M_2.det();
    EXPECT_APPROX_EQ(M_2_DET, -3.840132888329304e-001);

    M_2.transpose();
    Mat4x4<double> M_2_expect(4.888937703117894e-001, 1.034693009917860e+000, 
      7.268851333832379e-001, -3.034409247860159e-001, 2.938714670966581e-001, 
      -7.872828037586376e-001, 8.883956317576418e-001, -1.147070106969151e+000,
     -1.068870458168032e+000, -8.094986944248755e-001, -2.944284161994896e+000, 
      1.438380292815098e+000, 3.251905394561979e-001, -7.549283191697034e-001, 
      1.370298540095228e+000, -1.711516418853698e+000);
    EXPECT_TRUE(M_2.equal(&M_2_expect));

    Mat4x4<double> M_3;
    Mat4x4<double>::mult(&M_3, &M_1, &M_2);
    Mat4x4<double> M_3_expect(2.313690316835965e+000, 2.725006513571085e+000, 
      4.531197261647137e+000, -3.245766731868780e+000, -6.495266052500589e-001, 
      2.620816957956779e+000, -4.083665709142190e+000, 3.441353201668658e+000,
     -1.722744886666602e+000, -3.641498727834494e+000, -3.512005130167420e+000, 
      3.889124363704155e-001, 4.388634886743703e-001, 9.236541541824801e-001, 
      8.524165717446142e-002, -1.437522370255467e+000);
    EXPECT_TRUE(M_3.equal(&M_3_expect));

    Vec4<double> V_3;
    V_3.add(&V_1, &V_2);
    Vec4<double> V_3_expect(8.564323794050808e-001, 5.261967182898131e-001, 
      -2.692438883309332e+000, 1.204797786906771e+000);
    EXPECT_TRUE(V_3.equal(&V_3_expect));

    Vec4<double> V_4;
    V_4.sub(&V_1, &V_2);
    Vec4<double> V_4_expect(2.189018996871192e-001, 3.141573310900360e+000, 
      -1.825254838697965e+000, 5.195488538294706e-001);
    EXPECT_TRUE(V_4.equal(&V_4_expect));

    Vec4<double> V_5;
    V_5.pairwiseMult(&V_1, &V_2);
    Vec4<double> V_5_expect(1.713895947017047e-001, -2.398149970355620e+000, 
      9.794179785414171e-001, 2.954016739549838e-001);
    EXPECT_TRUE(V_5.equal(&V_5_expect));

    double VOT = V_1.dot(&V_2);
    EXPECT_APPROX_EQ(VOT, -9.519407231575143e-001);

    Mat4x4<double> M_4;
    Mat4x4<double>::inverse(&M_4, &M_3);
    Mat4x4<double> M_4_expect(4.224380293137507e+000, 1.756945738774290e+000,  
      3.299623525625032e+000, -4.439456166062089e+000, -1.072722341346062e+000, 
      -3.299182447285038e-001, -9.671415659374025e-001, 1.370627642625227e+000,
     -8.993283537885723e-001, -4.870271153233758e-001, -8.634340394938181e-001,
      6.310701746017395e-001, 5.470812859101863e-001, 2.955181703164883e-001, 
      3.347282993824935e-001, -1.132876865868168e+000);
    EXPECT_TRUE(M_4.equal(&M_4_expect));
  }

}  // tests namespace
